from neuron import h

import torch

from sbi import utils as utils
from sbi.inference.base import infer
from sbi.inference import SNPE, prepare_for_sbi, simulate_for_sbi
from sbi.utils.get_nn_models import posterior_nn

#The job of the optimizer is to take some summary statistics and return a set of parameters which 
#are generated by SBI.
class Optimizer():
    
    #This function initializes SBI and sets the summary_stats function and
    #The target summary stats.
    #Takes the target cell to optimize.
    #Takes a parameter range tuple which consists of the lower and upper parameter tensors.
    #Takes a summary_stat function which calculates the summary statistics for the optimizer.
    #Takes some target statistics to match.
    def __init__(self, cell, parameter_range, summary_funct, target_stats):
        #Set some parameters.
        self.__cell = cell
        # self.__lower = parameter_range[0]
        # self.__upper = parameter_range[1]
        self.__summary_funct = summary_funct
        self.__target_stats = target_stats

        #Set the default simulation parameters.
        self.set_simulation_params()
        
        # #Create the variables for tracking membrane potential and time.
        # self.__potential = h.Vector()
        # self.__time = h.Time()

        self.__i_clamp = h.IClamp(cell.soma[0](0.5))

        lows = torch.tensor(parameter_range[0], dtype=float)
        highs = torch.tensor(parameter_range[1], dtype=float)
        self.__prior = utils.BoxUniform(low=lows, high=highs)


        # self.__simulator, self.__prior = prepare_for_sbi(self.__simmulation_wrapper, self.__prior)
        # self.__density_estimator = posterior_nn(model='maf', hidden_features=12)
        # self.__inference = SNPE(prior=self.__prior, density_estimator=self.__density_estimator,show_progress_bars=True)
        
        

    def set_simulation_params(self, sim_run_time = 1500, delay = 400, inj_time = 500, i_inj = 0.2, v_init = -75):
        self.__sim_run_time = sim_run_time
        self.__delay = delay
        self.__inj_time = inj_time
        self.__i_inj = i_inj
        self.__v_init = v_init

        

    def simmulation_wrapper(self, **kwargs):
        #Set simulation parameters.
        h.tstop = self.__sim_run_time
        h.v_init = self.__v_init
        
        #Set current clamp values.
        self.__i_clamp.dur = self.__inj_time
        self.__i_clamp.amp = self.__i_inj
        self.__i_clamp.delay = self.__delay

        #Set cell parameters in all sections
        for sec in self.__cell.all:
            for key in kwargs:
                attribute = getattr(sec, key) 
                attribute = kwargs[key]

        h.run()




    

        