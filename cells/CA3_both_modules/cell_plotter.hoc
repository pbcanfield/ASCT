load_file("CA3.hoc")

//simuation constants
SIMRUNTIME = 2000
DELAY = 400
INJTIME = 1500
I_INJ = .65

tstop = SIMRUNTIME
v_init = -75

objectvar membrane_voltage, time
membrane_voltage = new Vector()
time = new Vector()

objectvar cell
cell = new CA3Cell()

//record the cells membrane voltage.
membrane_voltage.record(&cell.soma.v(0.5))
time.record(&t)


//Record the gating variables.
objref gating_vec[9], g_g
g_g = new Graph()
for(i = 0; i < 9; i+=1) {
    gating_vec[i] = new Vector()
}

//Manually assign what the tau varibles are for each one.
gating_vec[0].record(&cell.soma.minf_natCA3)
gating_vec[1].record(&cell.soma.hinf_natCA3)
gating_vec[2].record(&cell.soma.ninf_kdrCA3)
gating_vec[3].record(&cell.soma.minf_napCA3)
gating_vec[4].record(&cell.soma.ninf_imCA3)



//Record the tau variables.
objref tau_vec[9], g_t
g_t = new Graph()
for(i = 0; i < 9; i+=1) {
    tau_vec[i] = new Vector()
}

//Manually assign what the tau varibles are for each one.
tau_vec[0].record(&cell.soma.mtau_natCA3)
tau_vec[1].record(&cell.soma.htau_natCA3)
tau_vec[2].record(&cell.soma.taun_kdrCA3)
tau_vec[3].record(&cell.soma.mtau_napCA3)
tau_vec[4].record(&cell.soma.taun_imCA3)



//Record the currents.
objref g_cvt, nap_vec, nat_vec, sahp_vec, kdr_vec, capool_vec, cal_vec, im_vec, cas_vec, kca_vec
g_cvt = new Graph()
nap_vec = new Vector()
nat_vec = new Vector()
sahp_vec = new Vector()
kdr_vec = new Vector()
capool_vec = new Vector()
cal_vec = new Vector()
im_vec = new Vector()
cas_vec = new Vector()
kca_vec = new Vector()

nap_vec.record(&cell.soma.i_napCA3(0.5))
nat_vec.record(&cell.soma.i_natCA3(0.5))
sahp_vec.record(&cell.soma.i_sAHP(0.5))
kdr_vec.record(&cell.soma.i_kdrCA3(0.5))
capool_vec.record(&cell.soma.xx_capool())
cal_vec.record(&cell.soma.ica_cal(0.5))
im_vec.record(&cell.soma.i_imCA3(0.5))
cas_vec.record(&cell.soma.ica_cas(0.5))
kca_vec.record(&cell.soma.ik_kca(0.5))


//Create a current clamp.
objectvar i_inj
cell.soma i_inj = new IClamp(0.5)
i_inj.del = DELAY
i_inj.dur = INJTIME
i_inj.amp = I_INJ

//run the simulation and plot the outcome
run()

//Membrane voltage vs. time
objectvar g_mvt
g_mvt = new Graph()

proc mgraph() {
    g_mvt.size(0,SIMRUNTIME, 30, -90)
    g_mvt.vector(membrane_voltage.size(), &time.x[0], &membrane_voltage.x[0])
    g_mvt.flush()
}



objref nc, nil, spvec
func runSim(){


    cell.soma nc = new NetCon(&v(0.5),nil)
    spvec = new Vector()
    nc.record(spvec)

    i_inj.amp=$1

    run()

    return (spvec.size() / (INJTIME)) * 1000
}

printf("Cell fi at %f nA injection: %f\n",I_INJ,runSim(I_INJ))

proc cgraph() {
    //Graph currents.
    g_cvt.color(1)
    g_cvt.label("Black: nap")
    g_cvt.vector(nap_vec.size(), &time.x[0], &nap_vec.x[0])

    g_cvt.color(2)
    g_cvt.label("Red: nat")
    g_cvt.vector(nat_vec.size(), &time.x[0], &nat_vec.x[0])

    g_cvt.color(3)
    g_cvt.label("Blue: sAHP")
    g_cvt.vector(sahp_vec.size(), &time.x[0], &sahp_vec.x[0])

    g_cvt.color(4)
    g_cvt.label("Green: kdr")
    g_cvt.vector(kdr_vec.size(), &time.x[0], &kdr_vec.x[0])

    g_cvt.color(5)
    g_cvt.label("Orange: ca_pool")
    g_cvt.vector(capool_vec.size(), &time.x[0], &capool_vec.x[0])

    g_cvt.color(6)
    g_cvt.label("Brown: cal")
    g_cvt.vector(cal_vec.size(), &time.x[0], &cal_vec.x[0])

    g_cvt.color(7)
    g_cvt.label("Violet: im")
    g_cvt.vector(im_vec.size(), &time.x[0], &im_vec.x[0])
    
    g_cvt.color(9)
    g_cvt.label("Grey : cas")
    g_cvt.vector(cas_vec.size(), &time.x[0], &cas_vec.x[0])
	
	g_cvt.color(8)
	g_cvt.label("Yellow : Kca")
	g_cvt.vector(cas_vec.size(), &time.x[0], &kca_vec.x[0])

    g_cvt.flush()

    g_cvt.exec_menu("View = plot")
}

objref color_labels[9]
//Tau graphs
proc tgraph() {
    
    g_t.color(1)
    g_t.label("Black: nat activation tau")
    g_t.vector(tau_vec[0].size(), &time.x[0], &tau_vec[0].x[0])

    g_t.color(2)
    g_t.label("Red: nat inactivation tau")
    g_t.vector(tau_vec[1].size(), &time.x[0], &tau_vec[1].x[0])

    g_t.color(3)
    g_t.label("Blue: kdr tau")
    g_t.vector(tau_vec[2].size(), &time.x[0], &tau_vec[2].x[0])

    g_t.color(4)
    g_t.label("Green: nap tau")
    g_t.vector(tau_vec[3].size(), &time.x[0], &tau_vec[3].x[0])

    g_t.color(5)
    g_t.label("Orange: im tau")
    g_t.vector(tau_vec[4].size(), &time.x[0], &tau_vec[4].x[0])

    g_t.flush()

    g_t.exec_menu("View = plot")


} 

//M-infinity graphs.
proc ggraph() {
    g_g.color(1)
    g_g.label("Black: nat activation inf")
    g_g.vector(gating_vec[0].size(), &time.x[0], &gating_vec[0].x[0])

    g_g.color(2)
    g_g.label("Red: nat inactivation inf")
    g_g.vector(gating_vec[1].size(), &time.x[0], &gating_vec[1].x[0])

    g_g.color(3)
    g_g.label("Blue: kdr inf")
    g_g.vector(gating_vec[2].size(), &time.x[0], &gating_vec[2].x[0])

    g_g.color(4)
    g_g.label("Green: nap inf")
    g_g.vector(gating_vec[3].size(), &time.x[0], &gating_vec[3].x[0])

    g_g.color(5)
    g_g.label("Orange: im inf")
    g_g.vector(gating_vec[4].size(), &time.x[0], &gating_vec[4].x[0])

    g_g.flush()

    g_g.exec_menu("View = plot")
}

mgraph()
cgraph()
tgraph()
ggraph()

/*
objectvar g_fi, target, reported, current_inj
g_fi = new Graph()
reported = new Vector(10)
current_inj = new Vector(10)

count = 0
for (i = 0; i < 1.0; i += 0.1) {
    reported.x[count] = runSim(i)
    current_inj.x[count] = i
    count += 1
}

target = new Vector(10)
target.x[0] = 0
target.x[1] = 0
target.x[2] = 14
target.x[3] = 30
target.x[4] = 46
target.x[5] = 63
target.x[6] = 79
target.x[7] = 94
target.x[8] = 109
target.x[9] = 123

g_fi.color(4)
g_fi.vector(10, &current_inj.x[0],&target.x[0])

g_fi.color(1)
g_fi.vector(10, &current_inj.x[0],&reported.x[0])

g_fi.size(0,1.0,0,target.x[target.size() - 1] + 10)

g_fi.flush()
*/